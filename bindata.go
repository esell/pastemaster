// Code generated by go-bindata.
// sources:
// data/index.html
// data/show.html
// DO NOT EDIT!

package main

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x53\xcd\x72\xda\x30\x10\xbe\xe7\x29\x76\x36\x39\x98\x69\xc7\x4a\xd3\x4b\xc7\xb1\xfd\x0a\xcd\x4c\xf2\x02\x42\x28\x20\x22\x4b\xee\x6a\x45\xc2\x30\xbc\x7b\xc7\x92\x61\x0c\xa6\x87\x5e\xc0\x5a\x7d\xd2\xf7\xb3\xda\x7a\xc3\x9d\x6d\xef\x00\x00\xea\x8d\x96\xab\xfc\x99\x96\x6c\xd8\xea\xf6\x35\x2e\x3b\xc3\xf0\x22\x03\xeb\x5a\xe4\xda\x19\x03\x75\x50\x64\x7a\x86\x40\xaa\xc1\x0d\x73\x1f\x2a\x21\xe4\x56\x7e\x95\x6b\xef\xd7\x56\xcb\xde\x84\x52\xf9\x2e\xd5\x84\x35\xcb\x20\xb6\x7f\xa2\xa6\xbd\xf8\x59\x3e\x95\x3f\xc6\x45\xd9\x19\x57\x6e\x03\xb6\xb5\xc8\xf7\x8d\x82\x44\x56\x94\x17\x4b\xbf\xda\xb7\xb5\xd2\x8e\x35\x4d\x14\x0c\x5b\xef\x9e\xba\xcb\x52\x3e\xbe\xa4\x36\xfd\xcc\xb7\x58\x7f\xb1\x24\x2d\xc1\xac\x1a\xec\x74\x08\x72\xad\x11\xc8\x7f\x86\x06\x9f\x1e\x11\x94\xb7\xa1\xc1\x5f\x8f\x83\xa4\x13\xb6\x85\xff\xa2\x30\xae\x8f\x0c\xbc\xef\x75\x83\xcb\xc8\xec\x1d\x82\x77\xca\x1a\xf5\xd1\x60\x48\xa9\xbe\x91\x74\x41\x2a\x36\xde\x15\x0b\x84\x9d\xb4\x51\x37\x98\x13\xc7\x2b\x8f\x62\x6e\xb2\x1e\xc8\xaf\xb9\xeb\x3e\x79\x22\x1d\xa2\xe5\x41\x7e\x3f\x69\xa9\x98\xc6\x57\x8b\x14\xe9\x18\xef\xd8\xc8\xac\x77\xb0\x2c\xb6\x72\x27\x73\x75\xa2\xe5\x3d\xba\xa4\x17\x6e\x38\x80\xc3\x85\x92\x9d\x24\x18\xa3\x6d\x1e\x0a\xbc\x3f\xc5\xbc\x28\x77\xd2\x16\x8b\xe7\x0b\xf0\x43\x39\xbc\x90\xe2\x30\xcb\x71\x10\x54\x01\xbe\xfc\x7e\x7d\xc3\xef\xb3\xdd\x48\xb6\x02\x14\x4e\x7f\xa6\x07\x7a\x03\xb1\x92\x2c\x2b\x38\x8c\xe4\xd5\xf8\x7f\x9c\x03\x43\x54\x4a\x87\x50\x9d\x2d\x16\x43\x0a\xd7\xa6\xce\x7a\x0b\xbc\x1f\x33\x5e\x94\xc3\x0c\x15\xb8\xf7\x91\xc0\x1a\xf7\x01\x26\x54\x80\xf0\x0d\xd2\x05\xcf\xb3\xf3\x37\xc8\x35\x91\xa7\x09\xb5\x26\xfa\x17\xb3\xb4\x9a\x38\x01\x6e\xdc\x7c\x51\x39\x4e\x10\xc7\xb1\xe5\xa7\xf9\xaa\x45\x1e\xfc\xbb\xbf\x01\x00\x00\xff\xff\xa6\xb4\x4e\x6d\x01\x04\x00\x00")

func dataIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_dataIndexHtml,
		"data/index.html",
	)
}

func dataIndexHtml() (*asset, error) {
	bytes, err := dataIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/index.html", size: 1025, mode: os.FileMode(420), modTime: time.Unix(1539381357, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataShowHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x8f\x41\x0a\xc2\x40\x0c\x45\xf7\x3d\x45\xc8\x01\x4c\x71\xe5\x22\x9d\x8d\x17\xf0\x0a\xd3\x36\xd8\xc2\x74\x06\x66\x02\x2a\xa5\x77\x17\x1b\xa4\xa3\x9b\x90\x7c\xfe\xe7\xfd\xf0\xa4\x4b\x70\x0d\x00\x00\x4f\xe2\x47\x5b\xf7\x53\x67\x0d\xe2\x6e\xbe\xa8\xc0\x35\x45\x95\xa8\x4c\x26\x9a\x9f\x8e\x00\xf7\x69\x7c\x55\xd9\x41\xa2\x4a\x3e\x04\xf3\xf7\xd9\xed\x03\x7e\x75\x95\xa7\xfa\x2c\x1e\xe6\xb1\xc3\x45\x4a\xf1\x77\x41\xc8\xe9\x51\x3a\x3c\xb7\x08\x43\x0a\xa5\xc3\x4b\x8b\x6e\x5d\xe1\x04\xdb\xc6\xf4\x8d\xfc\x11\x3e\x80\xbe\xc2\x32\xd5\x45\x98\xac\x25\x93\x3d\xdd\xbc\x03\x00\x00\xff\xff\xe0\x3e\x56\xbb\xfd\x00\x00\x00")

func dataShowHtmlBytes() ([]byte, error) {
	return bindataRead(
		_dataShowHtml,
		"data/show.html",
	)
}

func dataShowHtml() (*asset, error) {
	bytes, err := dataShowHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/show.html", size: 253, mode: os.FileMode(420), modTime: time.Unix(1539292308, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/index.html": dataIndexHtml,
	"data/show.html": dataShowHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{dataIndexHtml, map[string]*bintree{}},
		"show.html": &bintree{dataShowHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
