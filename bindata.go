// Code generated by go-bindata.
// sources:
// data/index.html
// data/show.html
// DO NOT EDIT!

package main

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x54\xcf\x6e\xe3\x2c\x10\xbf\xf7\x29\x46\xb4\x07\x47\xdf\x27\x93\xed\x5e\x22\x17\xfb\x15\xb6\x52\xfb\x02\x98\xd0\x84\x14\x83\x97\x19\xd2\x46\x51\xde\x7d\x65\x70\x22\x27\xce\x1e\xf6\x62\x9b\xe1\x07\xbf\x3f\x0c\x16\x5b\xea\x6c\xf3\x00\x00\x20\xb6\x5a\xae\xf3\x67\x1a\x92\x21\xab\x9b\xb7\xd8\x76\x86\xe0\x55\x22\x69\xc1\x73\xed\x82\x01\x81\x2a\x98\x9e\x00\x83\xaa\xd9\x96\xa8\xc7\x8a\x73\xb9\x93\xdf\xe5\xc6\xfb\x8d\xd5\xb2\x37\x58\x2a\xdf\xa5\x1a\xb7\xa6\x45\xbe\xfb\x1d\x75\x38\xf0\x9f\xe5\x73\xf9\x63\x1c\x94\x9d\x71\xe5\x0e\x59\x23\x78\xde\x6f\x14\xc4\xb3\xa2\x3c\x68\xfd\xfa\xd0\x08\xa5\x1d\xe9\x30\x51\x30\x4c\x7d\xf8\xd0\x5d\x97\xf2\xf2\x36\x34\xe9\x31\x9f\x22\xfd\x4d\x32\x68\x09\x66\x5d\xb3\x4e\x23\xca\x8d\x66\x10\xfc\x17\xd6\xec\x79\xc9\x40\x79\x8b\x35\x5b\x2d\x07\x49\x67\x6c\x03\xff\x44\x61\x5c\x1f\x09\xe8\xd0\xeb\x9a\xb5\x91\xc8\x3b\x06\xde\x29\x6b\xd4\x67\xcd\x30\xa5\xfa\x1e\xa4\x43\xa9\xc8\x78\x57\x2c\x18\xec\xa5\x8d\xba\x66\x39\x71\x76\xe3\x91\xcf\x4d\x8a\x81\xfc\x96\x5b\xf4\xc9\x53\xd0\x18\x2d\x0d\xf2\xfb\xc9\x91\xf2\x69\x7c\x82\xa7\x48\xc7\x78\xc7\x83\xcc\x7a\x07\xcb\x7c\x27\xf7\x32\x57\x27\x5a\x3e\xa2\x4b\x7a\xe1\x8e\x03\x38\x5e\x29\xd9\xcb\x00\x63\xb4\xf5\x53\xc1\x1e\xcf\x31\x2f\xca\xbd\xb4\xc5\xe2\xe5\x0a\xfc\x54\x0e\x1d\x52\x1c\x67\x39\x0e\x82\x2a\x60\xaf\xbf\xde\xde\xd9\xff\xb3\xd9\x18\x6c\x05\xa9\xf1\x2a\xce\xad\x57\xd2\x6e\x3d\x52\xb5\x5a\xae\x96\xdc\xe9\xaf\xd4\xb5\x77\x96\xad\x25\xc9\x0a\x8e\xa3\xa2\x6a\x7c\x9f\xe6\x40\x8c\x4a\x69\xc4\xea\xe2\xbb\x18\xa2\xb9\x75\x7a\x31\x51\xb0\xc7\x31\xf8\x45\x39\x5c\xac\x82\x1d\x7c\x0c\x60\x8d\xfb\x04\x83\x15\x30\xf8\x0f\xd2\x06\x2f\xb3\xf5\x77\xc8\x75\x08\x3e\x4c\xa8\x75\x08\x7f\x63\x96\x56\x07\x4a\x80\x3b\x3b\x5f\x55\x4e\x13\xc4\x69\xec\x83\xf3\xa5\x13\x3c\xff\x0d\x1e\xfe\x04\x00\x00\xff\xff\x3b\x75\xa4\x30\x16\x04\x00\x00")

func dataIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_dataIndexHtml,
		"data/index.html",
	)
}

func dataIndexHtml() (*asset, error) {
	bytes, err := dataIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/index.html", size: 1046, mode: os.FileMode(420), modTime: time.Unix(1539292328, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataShowHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x8f\x41\x0a\xc2\x40\x0c\x45\xf7\x3d\x45\xc8\x01\x4c\x71\xe5\x22\x9d\x8d\x17\xf0\x0a\xd3\x36\xd8\xc2\x74\x06\x66\x02\x2a\xa5\x77\x17\x1b\xa4\xa3\x9b\x90\x7c\xfe\xe7\xfd\xf0\xa4\x4b\x70\x0d\x00\x00\x4f\xe2\x47\x5b\xf7\x53\x67\x0d\xe2\x6e\xbe\xa8\xc0\x35\x45\x95\xa8\x4c\x26\x9a\x9f\x8e\x00\xf7\x69\x7c\x55\xd9\x41\xa2\x4a\x3e\x04\xf3\xf7\xd9\xed\x03\x7e\x75\x95\xa7\xfa\x2c\x1e\xe6\xb1\xc3\x45\x4a\xf1\x77\x41\xc8\xe9\x51\x3a\x3c\xb7\x08\x43\x0a\xa5\xc3\x4b\x8b\x6e\x5d\xe1\x04\xdb\xc6\xf4\x8d\xfc\x11\x3e\x80\xbe\xc2\x32\xd5\x45\x98\xac\x25\x93\x3d\xdd\xbc\x03\x00\x00\xff\xff\xe0\x3e\x56\xbb\xfd\x00\x00\x00")

func dataShowHtmlBytes() ([]byte, error) {
	return bindataRead(
		_dataShowHtml,
		"data/show.html",
	)
}

func dataShowHtml() (*asset, error) {
	bytes, err := dataShowHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/show.html", size: 253, mode: os.FileMode(420), modTime: time.Unix(1539292308, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/index.html": dataIndexHtml,
	"data/show.html": dataShowHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{dataIndexHtml, map[string]*bintree{}},
		"show.html": &bintree{dataShowHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
